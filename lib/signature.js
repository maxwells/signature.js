// Generated by CoffeeScript 1.4.0
(function() {
  var Signature,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Signature = (function() {

    Signature.NORTH_WEST = 0;

    Signature.NORTH = 1;

    Signature.NORTH_EAST = 2;

    Signature.WEST = 3;

    Signature.CENTER = 4;

    Signature.EAST = 5;

    Signature.SOUTH_WEST = 6;

    Signature.SOUTH = 7;

    Signature.SOUTH_EAST = 8;

    function Signature(options) {
      this.onMouseOut = __bind(this.onMouseOut, this);

      this.onMouseUp = __bind(this.onMouseUp, this);

      this.onMouseDown = __bind(this.onMouseDown, this);

      this.onMouseMove = __bind(this.onMouseMove, this);

      this.rejectSignature = __bind(this.rejectSignature, this);

      this.acceptSignature = __bind(this.acceptSignature, this);

      this.determineWatermarkPosition = __bind(this.determineWatermarkPosition, this);
      if (options.displayId == null) {
        alert("SignatureÂ requires a displayId in the options hash passed to it's constructor");
      }
      this.options = options;
      this.display = document.getElementById(options.displayId);
      this.width = this.display.clientWidth;
      this.height = this.display.clientHeight;
      this.initialize();
    }

    Signature.prototype.initialize = function() {
      this.hasDrawn = false;
      this.initializeCanvas();
      this.initializeHttp();
      if (this.options.explanation != null) {
        this.initializeExplanation();
      }
      if (this.options.watermark != null) {
        this.setWatermark(this.options.watermark);
      } else {
        this.setupPad();
      }
      return this.setupListeners();
    };

    Signature.prototype.initializeHttp = function() {
      var _base, _base1, _base2;
      (_base = this.options).http || (_base.http = {});
      (_base1 = this.options.http).verb || (_base1.verb = 'POST');
      return (_base2 = this.options.http).dataParam || (_base2.dataParam = 'data');
    };

    Signature.prototype.setWatermark = function(options) {
      var imageObj,
        _this = this;
      if (!options.url) {
        return;
      }
      options.position || (options.position = 5);
      options.scale || (options.scale = 1);
      options.alpha || (options.alpha = 0.2);
      imageObj = new Image();
      imageObj.onload = function(event) {
        var height, img, position, width, _ref, _ref1;
        img = event.currentTarget;
        _this.context.globalAlpha = options.alpha;
        width = (_ref = options.width) != null ? _ref : img.width * options.scale;
        height = (_ref1 = options.height) != null ? _ref1 : img.height * options.scale;
        position = _this.determineWatermarkPosition(options.position, width, height);
        _this.context.drawImage(img, position.x, position.y, width, height);
        _this.context.globalAlpha = 1;
        return _this.setupPad();
      };
      return imageObj.src = options.url;
    };

    Signature.prototype.determineWatermarkPosition = function(position, width, height) {
      var bottomY, centerX, centerY, rightX;
      centerX = (this.width - width) / 2;
      centerY = (this.height - height) / 2;
      rightX = this.width - width;
      bottomY = this.height - height;
      switch (position) {
        case Signature.NORTH_WEST:
          return {
            x: 0,
            y: 0
          };
        case Signature.NORTH:
          return {
            x: centerX,
            y: 0
          };
        case Signature.NORTH_EAST:
          return {
            x: rightX,
            y: 0
          };
        case Signature.WEST:
          return {
            x: 0,
            y: centerY
          };
        case Signature.CENTER:
          return {
            x: centerX,
            y: centerY
          };
        case Signature.EAST:
          return {
            x: rightX,
            y: centerY
          };
        case Signature.SOUTH_WEST:
          return {
            x: 0,
            y: bottomY
          };
        case Signature.SOUTH:
          return {
            x: centerX,
            y: bottomY
          };
        case Signature.SOUTH_EAST:
          return {
            x: rightX,
            y: bottomY
          };
      }
    };

    Signature.prototype.initializeExplanation = function() {
      var _base, _base1, _base2, _base3, _base4, _base5;
      this.explanation = this.options.explanation;
      (_base = this.explanation).size || (_base.size = 10);
      (_base1 = this.explanation).weight || (_base1.weight = "normal");
      (_base2 = this.explanation).font || (_base2.font = "sans-serif");
      (_base3 = this.explanation).maxWidth || (_base3.maxWidth = this.display.offsetWidth);
      (_base4 = this.explanation).lineHeight || (_base4.lineHeight = this.explanation.size * 1.2);
      (_base5 = this.explanation).color || (_base5.color = "#000");
      if (this.explanation.position == null) {
        return this.explanation.position = Signature.NORTH;
      }
    };

    Signature.prototype.initializeCanvas = function() {
      this.canvas = document.createElement('canvas');
      this.canvas.id = 'signature-canvas';
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      this.display.appendChild(this.canvas);
      return this.context = this.canvas.getContext("2d");
    };

    Signature.prototype.drawLine = function(options) {
      var point, _i, _len, _ref, _ref1;
      if (!(options.points.length > 1)) {
        return;
      }
      this.context.beginPath();
      this.context.moveTo(options.points[0].x, options.points[0].y);
      _ref = options.points.slice(1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        this.context.lineTo(point.x, point.y);
      }
      this.context.lineWidth = (_ref1 = options.lineWidth) != null ? _ref1 : 1;
      return this.context.stroke();
    };

    Signature.prototype.setupPad = function() {
      if (this.options.explanation != null) {
        this.drawExplanation();
      }
      this.drawLine({
        points: [
          {
            x: 20,
            y: this.height - 15
          }, {
            x: this.width - 20,
            y: this.height - 15
          }
        ]
      });
      this.drawLine({
        points: [
          {
            x: 25,
            y: this.height - 32
          }, {
            x: 35,
            y: this.height - 22
          }
        ],
        lineWidth: 2
      });
      return this.drawLine({
        points: [
          {
            x: 35,
            y: this.height - 32
          }, {
            x: 25,
            y: this.height - 22
          }
        ],
        lineWidth: 2
      });
    };

    Signature.prototype.drawExplanation = function() {
      var line, lines, position, _i, _len;
      this.captureContextTextStyle();
      this.context.font = "" + this.explanation.weight + " " + this.explanation.size + "px " + this.explanation.font;
      this.context.textBaseline = "top";
      this.context.fillStyle = this.explanation.color;
      position = {};
      switch (this.explanation.position % 3) {
        case 0:
          this.context.textAlign = "left";
          position.x = 0;
          break;
        case 1:
          this.context.textAlign = "center";
          position.x = this.width / 2;
          break;
        case 2:
          this.context.textAlign = "right";
          position.x = this.width;
      }
      lines = this.wrapTextIfNecessary(this.explanation.text, position.x, position.y, this.explanation.maxWidth, this.explanation.lineHeight);
      switch (Math.floor(this.explanation.position / 3)) {
        case 0:
          position.y = 0;
          break;
        case 1:
          position.y = this.height / 2 - lines.length * this.explanation.lineHeight / 2;
          break;
        case 2:
          position.y = this.height - lines.length * this.explanation.lineHeight;
      }
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        this.context.fillText(line, position.x, position.y);
        position.y += this.explanation.lineHeight;
      }
      return this.restoreContextTextStyle();
    };

    Signature.prototype.captureContextTextStyle = function() {
      this.contextFillStyle = this.context.fillStyle;
      this.contextFontStyle = this.context.font;
      return this.contextTextBaseline = this.context.textBaseline;
    };

    Signature.prototype.restoreContextTextStyle = function() {
      this.context.fillStyle = this.contextFillStyle;
      this.context.font = this.contextFontStyle;
      return this.context.textBaseline = this.contextTextBaseline;
    };

    Signature.prototype.wrapTextIfNecessary = function(text, x, y, maxWidth, lineHeight) {
      var line, lines, testLine, word, _i, _len, _ref;
      line = '';
      lines = [];
      _ref = text.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        testLine = "" + line + word + " ";
        if (this.context.measureText(testLine).width > maxWidth) {
          lines.push(line);
          line = "" + word + " ";
          y += lineHeight;
        } else {
          line = testLine;
        }
      }
      lines.push(line);
      return lines;
    };

    Signature.prototype.save = function() {
      var xmlhttp,
        _this = this;
      if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest();
      } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
      }
      if (this.options.http.onSave != null) {
        xmlhttp.onreadystatechange = function() {
          return _this.options.http.onSave(JSON.parse(xmlhttp.responseText));
        };
      } else {
        xmlhttp.onreadystatechange = function() {
          var response;
          if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            return response = JSON.parse(xmlhttp.responseText);
          }
        };
      }
      xmlhttp.open(this.options.http.verb, this.options.http.address, true);
      xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      console.log(this.asBase64PNG());
      return xmlhttp.send("" + this.options.http.dataParam + "=" + (this.asBase64PNG()));
    };

    Signature.prototype.acceptSignature = function() {
      if (this.options.save != null) {
        this.options.save(this.asBase64PNG());
      } else {
        if (this.options.http != null) {
          this.save();
        }
      }
      return this.clearAndRemoveButtons();
    };

    Signature.prototype.rejectSignature = function() {
      return this.clearAndRemoveButtons();
    };

    Signature.prototype.clearAndRemoveButtons = function() {
      this.display.removeChild(this.canvas);
      this.display.removeChild(this.accept);
      this.display.removeChild(this.reject);
      return this.initialize();
    };

    Signature.prototype.displayAcceptReject = function() {
      this.accept = document.createElement('button');
      if (this.options.buttonClass != null) {
        this.accept.className = this.options.buttonClass;
      }
      this.accept.innerHTML = "Accept";
      this.accept.onmouseup = this.acceptSignature;
      this.display.appendChild(this.accept);
      this.reject = document.createElement('button');
      if (this.options.buttonClass != null) {
        this.reject.className = this.options.buttonClass;
      }
      this.reject.innerHTML = "Reject";
      this.reject.onmouseup = this.rejectSignature;
      return this.display.appendChild(this.reject);
    };

    Signature.prototype.asBase64PNG = function() {
      return this.canvas.toDataURL('image/png').replace(/^data:image\/png;base64,/, "");
    };

    Signature.prototype.setupListeners = function() {
      this.display.onmousedown = this.onMouseDown;
      this.display.onmouseup = this.onMouseUp;
      this.display.onmouseout = this.onMouseOut;
      this.display.onmousemove = this.onMouseMove;
      this.display.addEventListener("touchstart", this.touchHandler, true);
      this.display.addEventListener("touchmove", this.touchHandler, true);
      this.display.addEventListener("touchend", this.touchHandler, true);
      return this.display.addEventListener("touchcancel", this.touchHandler, true);
    };

    Signature.prototype.touchHandler = function(e) {
      var first, simulatedEvent, touches, type;
      touches = event.changedTouches;
      first = touches[0];
      type = "";
      switch (e.type) {
        case 'touchstart':
          type = 'mousedown';
          break;
        case 'touchstart':
          type = 'mousedown';
          break;
        case 'touchmove':
          type = 'mousemove';
          break;
        case 'touchend':
          type = 'mouseup';
      }
      simulatedEvent = document.createEvent("MouseEvent");
      simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0, null);
      first.target.dispatchEvent(simulatedEvent);
      return e.preventDefault();
    };

    Signature.prototype.onMouseMove = function(e) {
      var _ref, _ref1;
      if (this.drawing) {
        if (!this.hasDrawn) {
          this.displayAcceptReject();
        }
        this.hasDrawn = true;
        this.newPoint = {
          x: (_ref = e.offsetX) != null ? _ref : e.layerX - this.display.offsetLeft,
          y: (_ref1 = e.offsetY) != null ? _ref1 : e.layerY - this.display.offsetTop
        };
        this.drawLine({
          points: [this.prevPoint, this.newPoint],
          lineWidth: 2
        });
        this.prevPoint = this.newPoint;
        return console.log('drawing');
      }
    };

    Signature.prototype.onMouseDown = function(e) {
      var _ref, _ref1;
      this.drawing = true;
      return this.prevPoint = {
        x: (_ref = e.offsetX) != null ? _ref : e.layerX - this.display.offsetLeft,
        y: (_ref1 = e.offsetY) != null ? _ref1 : e.layerY - this.display.offsetTop
      };
    };

    Signature.prototype.onMouseUp = function() {
      return this.drawing = false;
    };

    Signature.prototype.onMouseOut = function() {
      return this.drawing = false;
    };

    return Signature;

  })();

  window.Signature = Signature;

}).call(this);
